// 1. 타입스크립트와 자바스크립트의 관계 이해하기

// 타입스크립트는 문법적으로도 자바스크립트의 상위집합이다.
// 자바스크립트 프로그램에 문법 오류가 없다면, 유효한 타입스크립트 프로그램이라고 할 수 있다. 그런데 자바스크립트 프로그램에 어떤 이슈가 존재한다면 문법 오류가 아니라도 타입 체커에게 지적당할 가능성이 높다.
// 그러나 문법의 유효성과 동작의 이슈는 독립적인 문제이다. 타입스크립트는 여전히 작성된 코드를 파싱하고 자바스크립트로 변환할 수 있다.
// 자바스크립트는 .js / .jsx 확장자를 사용하는 반면, 타입스크립트는 .ts / .tsx 확장자를 사용한다.

// 타입스크립트 > 자바스크립트

interface State {
    name: string;
    capital: string;
}
const states: State[] = [
    {
        name: 'Alabama',
        capital: 'Montgomery',
    },
    {
        name: 'Alabama',
        capital: 'Juneau',
    },
    {
        name: 'Alabama',
        capitol: 'Phoenix', // property 오류
    },
];

// 요약
// - 타입스크립트는 자바스크립트의 상위집합이다. 다시 말해서, 모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램이다.
// 반대로, 타입스크립트는 별도의 문법을 가지고 있기 때문에 일반적으로는 유효한 자바스크립트 프로그램이 아니다.

// - 타입스크립트는 자바스크립트 런타임동작을 모델링하는 타입 시스템을 가지고 있기 때문에 런타임 오류를 발생시키는 코드를 찾아내려고 한다.
// 그러나 모든 오류를 찾아내리라 기대하면 안된다. 타입 체커를 통과하면서도 런타임 오류를 발생시키는 코드는 충분히 존재할 수 있다.

// - 타입스크립트 타입 시스템은 전반적으로 자바스크립트 동작을 모델링한다.
// 그러나 잘못된 매개변수 개수로 함수로 호출하는 경우처럼, 자바스크립트에서는 허용되지만 타입스크립트에서는 문제가 되는 경우도 있다.
// 이러한 문법의 엄격함은 온전히 취향의 차이이며 우열을 가릴 수 없는 문제이다.
