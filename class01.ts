// 1.2 바닐라 쟈바스크립트의 함정

// 1.2.1 값 비싼 자유
// 자바스크립트를 사용하는 개발자들의 가장 큰 불만은 불행히도 핵심 기능에 있다.
// 자바스크립트는 사실상 코드를 구성하는 방법에 제한이 없다. 이러한 자유 덕분에 프로젝트를 자바스크립트로 시작하면 매우 재미있다.
// 그러나 파일이 점점 늘어날수록 그 자유가 얼마나 훼손될 수 있는지 명확해진다.
// 다른 언어는 컴파일러가 충돌할 수 있다고 판단하면 코드 실행을 거부할 수 있다.
// 하지만 자바스크립트처럼 충돌 가능성을 먼저 확인하지 않고 코드를 실행하는 동적(Dynamic)타입 언어는 그렇지 않다.
// 결국 코드의 자유는 자바스크립트를 재미있게 만들기도 하지만, 여러분의 코드를 안전하게 실행하려고 할 때는 상당한 고통을 안겨준다.

// JSDoc 설명이 코드가 잘못되는 것을 막을 수 없다.
// JSDoc 설명이 이전에는 정확했더라도 코드 리펙토링 중에 생긴 변경 사항과 관련된 현재 유효하지 않은 JSDoc 주석을 모두 찾기란 어렵다.
// 복잡한 객체를 설명할 때는 다루기 어렵고 장황해서 타입과 그 관계를 정의하려면 다수의 독립형 주석이 필요하다.

// 1.3 타입스크립트
// 타입스크립트는 종종 '자바스크립트의 상위 집합' 혹은 '타입이 있는 자바스크립트'로 설명되곤 한다.
// 그렇다면 타입스크립트는 무엇일까?

// 타입스크립트는 네 가지로 설명된다.
// - 프로그래밍 언어 : 자바스크립트의 모든 구문과, 타입을 정의하고 사용하기 위한 새로운 타입스크립트 고유 구문이 포함된 언어
// - 타입 검사기 : 자바스크립트 및 타입스크립트로 작성된 일련의 파일에서 생성된 모든 구성 요소(변수, 함수 등)를 이해하고, 잘못 구성된 부분을 알려주는 프로그램
// - 컴파일러 : 타입 검사기를 실행하고 문제를 보고한 후 이에 대응되는 자바스크립트 코드를 생성하는 프로그램
//-  언어 서비스 : 타입 검사기를 사용해 VS Code와 같은 편집기에 개발자에게 유용한 유틸리티 제공법을 알려주는 프로그램

// 1.4.2 제한을 통한 자유
// 타입스크립트를 사용하면 매개변수와 변수에 제공되는 값의 타입을 지정할 수 있다.
// 일부 개발자는 처음에는 특정 영역이 제한적으로 작동하는 방법을 코드에 명시적으로 작성해야 한다고 생각한다.
// 하지만 개인적으로 이런 식의 '제한'은 실제로 바람직하다고 생각한다.
// 코드를 지정한 방법으로만 사용하도록 제한한다면, 타입스크립트는 코드의 한 영역을 변경하더라도 이 코드를 사용하는 다른 코드 영역이 멈추지 않는다는 확신을 줄 수 있다.

// 1.6 타입스크립트에 대한 오해
// 타입스크립트가 얼마나 훌륭한지 알았으니, 이제는 타입스크립트의 몇 가지 제약을 알아보자.

// 1.6.1 잘못된 코드 해결책
// 타입스크립트는 자바스크립트 코드를 구조화하는 데 도움이 되지만, 타입 안정성 강화를 제외하고는 해당 구조가 어떻게 보여야 하는지에 대해서는 어떤 것도 강요하지 않는다. 매우 좋은 특징이다.
// 타입스크립트는 클래스 사용을 강요한다거나, 타입스크립트가 좋은 코드작성을 어렵게 만든다거나, 코드 스타일이 불편하다고 말한다면
// 타입스크립트는 클래스나 함수 사용 여부와 같은 코드 스타일 의견을 강요하지 않으며, 앵귤러 & 리액트 & 뷰 등의 특정 애플리케이션 프레임워크와도 연관되어 있지 않다.

// 1.6.2 자바스크립트로의 확장
// 타입스크립트의 설계목표는 다음과 같다.
// - 현재와 미래의 ECMA 스크립트 제안에 맞춘다.
// - 모든 자바스크립트 코드의 런타임 동작을 유지한다.
// 타입스크립트는 자바스크립트 작동 방식을 전혀 변경하지 않는다. 타입스크립트 개발자들은 자바스크립트에 추가되거나 자바스크립트와 충돌할 수 있는 새로운 코드 기능을 타입스크립트에 추가하지 않기 위해 매우 열심히 노력했다.

// 1.6.3 자바스크립트보다 느림
// 타입스크립트는 코드를 빌드하는 데 시간이 좀 더 걸린다.
// 타입스크립트 코드는 브라우저나 Node.js와 같은 환경에서 실행되기 전에 자바스크립트로 컴파일 되어야 한다.
