// 6장 : 배열
// 자바스크립트 배열은 매우 유연하고 내부에 모든 타입의 값을 혼합해서 저장할 수 있다.

const elements = [true, null, undefined, 42]
elements.push("even", ["more"])
// elements 배열의 값 : [true, null, undefined, 42, "even", ["more"]]

// 그러나 대부분의 개별 자바스크립트 배열은 하나의 특정 타입의 값만 가진다.
// 다른 타입의 값을 추가하게 되면 배열을 읽을 때 혼란을 줄 수 있으며, 최악의 상황으로는 프로그램에 문제가 될 만한 오류가 발생할 수도 있다.

// 타입스크립트는 초기 배열에 어떤 데이터 타입이 있는지 기억하고, 배열이 해당 데이터 타입에서만 작동하도록 제한한다.
// 이런 방식으로 배열의 데이터 타입을 하나로 유지시킨다.

// 다음 예제에서 타입스크립트 warriors 배열이 초기에 string 타입의 값을 포함한다는 것을 알고 있으므로 이후 string 타입의 값 추가는 허용하지만 다른 데이터 타입추가는 허용하지 않는다.
const warriors = ["Artemisia", "Boudica"]

warriors.push("Zenobia") // OK : "Zenobia"의 타입은 string
warriors.push(true) // 'boolean' 형식의 인수는 'string' 형식의 매개 변수에 할당될 수 없습니다.

// 타입스크립트가 초기 배열에 담긴 요소를 통해 배열의 타입을 유추하는 방법은 변수의 초깃값에서 변수 타입을 유추하는 방법과 유사하다.
// 타입스크립트는 값이 할당되는 방식에서 코드의 의도된 타입을 이해하려고 시도하며 배열도 예외는 아니다.

// 6.1 배열 타입
// 다른 변수 선언과 마찬가지로 배열을 저장하기 위한 변수는 초깃값이 필요하지 않는다.
// 변수는 undefined로 시작해서 나중에 배열 값을 받을 수 있다.

// 타입스크립트는 변수에 타입 애너테이션을 제공해 배열이 포함해야 하는 값의 타입을 알려주려고 한다.
// 배열에 대한 타입 애너테이션은 배열의 요소 타입 다음에 []가 와야 한다.

let arrayOfNumbers: number[]
arrayOfNumbers = [4, 8, 15, 16, 23, 42]

// 6.1.1 배열과 함수 타입
// 배열 타입은 함수 타입에 무엇이 있는지를 구별하는 괄호가 필요한 구문 컨테이너의 예이다.
// 괄호는 애너테이션의 어느 부분이 함수 반환 부분이고, 어느 부분이 배열 타입 묶음인지를 나타내기 위해 사용한다.

// 다음 함수 타입인 createStrings는 배열 타입인 stringCreators와 동일하지 않다.

// 타입은 string 배열을 반환하는 함수
let createStrings: () => string[]

// 타입은 각각의 string을 반환하는 함수 배열
let stringCreators: (() => string)[]

// 6.1.2 유니언 타입 배열
// 배열의 각 요소가 여러 선택 타입 중 하나일 수 있음을 나타내려면 유니언 타입을 사용한다.
// 유니언 타입으로 배열 타입을 사용할 때 에너테이션의 어느 부분이 배열의 콘텐츠이고 어느 부분이 유니언 타입 묶음인지를 나타내기 위해 괄호를 사용해야 할 수도 있다.
// 유니언 타입 배열에서 괄호 사용은 매우 중요하다.
// 따라서 다음 코드와 두 타입은 동일하지 않다.

// 타입은 string 또는 number의 배열
let stringOrArrayOfNumbers: string | number[]

// 타입은 각각 number 또는 string인 요소의 배열
let arrayOfStringOrNumbers: (string | number)[]

// 타입스크립트는 배열의 선언에서 두 가지 이상의 요소 타입이 포함되는 경우 유니언 타입 배열임을 알게 된다.
// 즉, 배열의 요소 타입은 배열에 담긴 요소에 대한 모든 가능한 타입의 집합이다.
